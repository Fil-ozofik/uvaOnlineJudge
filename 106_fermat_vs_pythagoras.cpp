/*
106 - Fermat vs. Pythagoras
http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=3&page=show_problem&problem=42
*/
#include <cstdint>
#include <iostream>
#include <array>
#include <vector>
#include <set>
#include <algorithm>

struct Triplet 
{
	uint32_t a;
	uint32_t b;
	uint32_t c;
	Triplet(uint32_t a_, uint32_t b_, uint32_t c_) : a(std::min(a_, b_)), b(std::max(a_,b_)), c(c_) {}

	//Memory for is_primitive()
	static std::set<Triplet> primitives;

	bool is_primitive() const 
	{
		if(primitives.count(*this)==1)
			return true;
		if(c & 1)//c is required to be odd
		{
			return coprime(a, b);
		}
		return false;
	}

	void handle_non_primitives(std::vector<bool>& encountered_numbers, uint32_t big_n)
	{
		Triplet tested { *this };
		tested.a +=	a;
		tested.b += b;
		tested.c += c;
		while(tested.c <= big_n)
		{
			encountered_numbers[tested.a] = true;
			encountered_numbers[tested.b] = true;
			encountered_numbers[tested.c] = true;
			tested.a +=	a;
			tested.b += b;
			tested.c += c;
		}
	}

	static bool coprime(uint32_t a, uint32_t b)
	{
		if(((a | b) & 1) == 0) return false;

		while ((a & 1) == 0) a >>= 1;
		if (a == 1) return true;

		do
		{
			while ((b & 1) == 0) b >>= 1;
			if (b == 1U) return true;

			if (a > b) { std::swap(a,b); }
			b -= a;
		} while (b != 0U);

		return false;
	}

	bool operator<(const Triplet& rhs) const 
	{
		return a<rhs.a || (a==rhs.a && b<rhs.b) || (a==rhs.a && b==rhs.b && c<rhs.c);
	}
};

std::set<Triplet> Triplet::primitives = std::set<Triplet>();

//Returns the square of a number below 1001
uint32_t square(uint32_t number) noexcept
{
	//we know we will not calculate higher squares (precomputed)
	static std::array<uint32_t, 1001> squares {{0U,1U,4U,9U,16U,25U,36U,49U,64U,81U,100U,121U,144U,169U,196U,225U,256U,289U,324U,361U,400U,441U,484U,529U,576U,625U,676U,729U,784U,841U,900U,961U,1024U,1089U,1156U,1225U,1296U,1369U,1444U,1521U,1600U,1681U,1764U,1849U,1936U,2025U,2116U,2209U,2304U,2401U,2500U,2601U,2704U,2809U,2916U,3025U,3136U,3249U,3364U,3481U,3600U,3721U,3844U,3969U,4096U,4225U,4356U,4489U,4624U,4761U,4900U,5041U,5184U,5329U,5476U,5625U,5776U,5929U,6084U,6241U,6400U,6561U,6724U,6889U,7056U,7225U,7396U,7569U,7744U,7921U,8100U,8281U,8464U,8649U,8836U,9025U,9216U,9409U,9604U,9801U,10000U,10201U,10404U,10609U,10816U,11025U,11236U,11449U,11664U,11881U,12100U,12321U,12544U,12769U,12996U,13225U,13456U,13689U,13924U,14161U,14400U,14641U,14884U,15129U,15376U,15625U,15876U,16129U,16384U,16641U,16900U,17161U,17424U,17689U,17956U,18225U,18496U,18769U,19044U,19321U,19600U,19881U,20164U,20449U,20736U,21025U,21316U,21609U,21904U,22201U,22500U,22801U,23104U,23409U,23716U,24025U,24336U,24649U,24964U,25281U,25600U,25921U,26244U,26569U,26896U,27225U,27556U,27889U,28224U,28561U,28900U,29241U,29584U,29929U,30276U,30625U,30976U,31329U,31684U,32041U,32400U,32761U,33124U,33489U,33856U,34225U,34596U,34969U,35344U,35721U,36100U,36481U,36864U,37249U,37636U,38025U,38416U,38809U,39204U,39601U,40000U,40401U,40804U,41209U,41616U,42025U,42436U,42849U,43264U,43681U,44100U,44521U,44944U,45369U,45796U,46225U,46656U,47089U,47524U,47961U,48400U,48841U,49284U,49729U,50176U,50625U,51076U,51529U,51984U,52441U,52900U,53361U,53824U,54289U,54756U,55225U,55696U,56169U,56644U,57121U,57600U,58081U,58564U,59049U,59536U,60025U,60516U,61009U,61504U,62001U,62500U,63001U,63504U,64009U,64516U,65025U,65536U,66049U,66564U,67081U,67600U,68121U,68644U,69169U,69696U,70225U,70756U,71289U,71824U,72361U,72900U,73441U,73984U,74529U,75076U,75625U,76176U,76729U,77284U,77841U,78400U,78961U,79524U,80089U,80656U,81225U,81796U,82369U,82944U,83521U,84100U,84681U,85264U,85849U,86436U,87025U,87616U,88209U,88804U,89401U,90000U,90601U,91204U,91809U,92416U,93025U,93636U,94249U,94864U,95481U,96100U,96721U,97344U,97969U,98596U,99225U,99856U,100489U,101124U,101761U,102400U,103041U,103684U,104329U,104976U,105625U,106276U,106929U,107584U,108241U,108900U,109561U,110224U,110889U,111556U,112225U,112896U,113569U,114244U,114921U,115600U,116281U,116964U,117649U,118336U,119025U,119716U,120409U,121104U,121801U,122500U,123201U,123904U,124609U,125316U,126025U,126736U,127449U,128164U,128881U,129600U,130321U,131044U,131769U,132496U,133225U,133956U,134689U,135424U,136161U,136900U,137641U,138384U,139129U,139876U,140625U,141376U,142129U,142884U,143641U,144400U,145161U,145924U,146689U,147456U,148225U,148996U,149769U,150544U,151321U,152100U,152881U,153664U,154449U,155236U,156025U,156816U,157609U,158404U,159201U,160000U,160801U,161604U,162409U,163216U,164025U,164836U,165649U,166464U,167281U,168100U,168921U,169744U,170569U,171396U,172225U,173056U,173889U,174724U,175561U,176400U,177241U,178084U,178929U,179776U,180625U,181476U,182329U,183184U,184041U,184900U,185761U,186624U,187489U,188356U,189225U,190096U,190969U,191844U,192721U,193600U,194481U,195364U,196249U,197136U,198025U,198916U,199809U,200704U,201601U,202500U,203401U,204304U,205209U,206116U,207025U,207936U,208849U,209764U,210681U,211600U,212521U,213444U,214369U,215296U,216225U,217156U,218089U,219024U,219961U,220900U,221841U,222784U,223729U,224676U,225625U,226576U,227529U,228484U,229441U,230400U,231361U,232324U,233289U,234256U,235225U,236196U,237169U,238144U,239121U,240100U,241081U,242064U,243049U,244036U,245025U,246016U,247009U,248004U,249001U,250000U,251001U,252004U,253009U,254016U,255025U,256036U,257049U,258064U,259081U,260100U,261121U,262144U,263169U,264196U,265225U,266256U,267289U,268324U,269361U,270400U,271441U,272484U,273529U,274576U,275625U,276676U,277729U,278784U,279841U,280900U,281961U,283024U,284089U,285156U,286225U,287296U,288369U,289444U,290521U,291600U,292681U,293764U,294849U,295936U,297025U,298116U,299209U,300304U,301401U,302500U,303601U,304704U,305809U,306916U,308025U,309136U,310249U,311364U,312481U,313600U,314721U,315844U,316969U,318096U,319225U,320356U,321489U,322624U,323761U,324900U,326041U,327184U,328329U,329476U,330625U,331776U,332929U,334084U,335241U,336400U,337561U,338724U,339889U,341056U,342225U,343396U,344569U,345744U,346921U,348100U,349281U,350464U,351649U,352836U,354025U,355216U,356409U,357604U,358801U,360000U,361201U,362404U,363609U,364816U,366025U,367236U,368449U,369664U,370881U,372100U,373321U,374544U,375769U,376996U,378225U,379456U,380689U,381924U,383161U,384400U,385641U,386884U,388129U,389376U,390625U,391876U,393129U,394384U,395641U,396900U,398161U,399424U,400689U,401956U,403225U,404496U,405769U,407044U,408321U,409600U,410881U,412164U,413449U,414736U,416025U,417316U,418609U,419904U,421201U,422500U,423801U,425104U,426409U,427716U,429025U,430336U,431649U,432964U,434281U,435600U,436921U,438244U,439569U,440896U,442225U,443556U,444889U,446224U,447561U,448900U,450241U,451584U,452929U,454276U,455625U,456976U,458329U,459684U,461041U,462400U,463761U,465124U,466489U,467856U,469225U,470596U,471969U,473344U,474721U,476100U,477481U,478864U,480249U,481636U,483025U,484416U,485809U,487204U,488601U,490000U,491401U,492804U,494209U,495616U,497025U,498436U,499849U,501264U,502681U,504100U,505521U,506944U,508369U,509796U,511225U,512656U,514089U,515524U,516961U,518400U,519841U,521284U,522729U,524176U,525625U,527076U,528529U,529984U,531441U,532900U,534361U,535824U,537289U,538756U,540225U,541696U,543169U,544644U,546121U,547600U,549081U,550564U,552049U,553536U,555025U,556516U,558009U,559504U,561001U,562500U,564001U,565504U,567009U,568516U,570025U,571536U,573049U,574564U,576081U,577600U,579121U,580644U,582169U,583696U,585225U,586756U,588289U,589824U,591361U,592900U,594441U,595984U,597529U,599076U,600625U,602176U,603729U,605284U,606841U,608400U,609961U,611524U,613089U,614656U,616225U,617796U,619369U,620944U,622521U,624100U,625681U,627264U,628849U,630436U,632025U,633616U,635209U,636804U,638401U,640000U,641601U,643204U,644809U,646416U,648025U,649636U,651249U,652864U,654481U,656100U,657721U,659344U,660969U,662596U,664225U,665856U,667489U,669124U,670761U,672400U,674041U,675684U,677329U,678976U,680625U,682276U,683929U,685584U,687241U,688900U,690561U,692224U,693889U,695556U,697225U,698896U,700569U,702244U,703921U,705600U,707281U,708964U,710649U,712336U,714025U,715716U,717409U,719104U,720801U,722500U,724201U,725904U,727609U,729316U,731025U,732736U,734449U,736164U,737881U,739600U,741321U,743044U,744769U,746496U,748225U,749956U,751689U,753424U,755161U,756900U,758641U,760384U,762129U,763876U,765625U,767376U,769129U,770884U,772641U,774400U,776161U,777924U,779689U,781456U,783225U,784996U,786769U,788544U,790321U,792100U,793881U,795664U,797449U,799236U,801025U,802816U,804609U,806404U,808201U,810000U,811801U,813604U,815409U,817216U,819025U,820836U,822649U,824464U,826281U,828100U,829921U,831744U,833569U,835396U,837225U,839056U,840889U,842724U,844561U,846400U,848241U,850084U,851929U,853776U,855625U,857476U,859329U,861184U,863041U,864900U,866761U,868624U,870489U,872356U,874225U,876096U,877969U,879844U,881721U,883600U,885481U,887364U,889249U,891136U,893025U,894916U,896809U,898704U,900601U,902500U,904401U,906304U,908209U,910116U,912025U,913936U,915849U,917764U,919681U,921600U,923521U,925444U,927369U,929296U,931225U,933156U,935089U,937024U,938961U,940900U,942841U,944784U,946729U,948676U,950625U,952576U,954529U,956484U,958441U,960400U,962361U,964324U,966289U,968256U,970225U,972196U,974169U,976144U,978121U,980100U,982081U,984064U,986049U,988036U,990025U,992016U,994009U,996004U,998001U,1000000}};
	return squares[number];
}

int main(void)
{
	std::ios::sync_with_stdio(false);

	uint32_t big_n, m, n;

	do
	{
		std::cin >> big_n;
		if(std::cin.eof())
			break;
		std::vector<bool> encountered_numbers(big_n+1, false);
		
		uint32_t primitive_count { 0U };
		n = 1U; 
		do
		{
			m = n+1U;
			uint32_t c = square(m) + square(n);
			if(c > big_n)
				break;
			do
			{
				//Pythagorean triple are of the form:
				//m² - n² ; 2mn ; m² + n²
				Triplet tested { square(m)-square(n), (m*n)<<1, c };
				if(tested.is_primitive())
				{
					++primitive_count;
					encountered_numbers[tested.a] = true;
					encountered_numbers[tested.b] = true;
					encountered_numbers[tested.c] = true;
					tested.handle_non_primitives(encountered_numbers, big_n);
					Triplet::primitives.insert(std::move(tested));
				}
				c = square(++m) + square(n);
			} while(c <= big_n);
		} while(++n);

		std::cout << primitive_count << " " << std::count(encountered_numbers.cbegin(), encountered_numbers.cend(), false)-1 << std::endl;		
	} while(1);
	return 0;
}

